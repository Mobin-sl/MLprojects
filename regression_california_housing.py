# -*- coding: utf-8 -*-
"""Regression_California_Housing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yulr6yYHSxb8hsAewgP17UrkmLChXhyN
"""

from sklearn import datasets
import pandas as pd
Housing_X, Housing_y = datasets.fetch_california_housing(return_X_y=True , as_frame=True)
data = pd.concat([Housing_X, Housing_y], axis=1)
data

data.isnull().sum().sum()

oldest_houses = data.sort_values(by="HouseAge" , ascending = False)
oldest_houses[['HouseAge',"MedHouseVal"]].head(10)

populated_houses = data.sort_values(by="Population" , ascending = False)
populated_houses[['Population',"MedHouseVal"]].head(10)

data.corr(method = "pearson")

"""# **TRY WITH SIMPLE MODELS**"""

from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split

from sklearn.metrics import r2_score
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge
from sklearn.linear_model import ElasticNet
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.tree import ExtraTreeRegressor
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler

Housing_X, Housing_y = datasets.fetch_california_housing(return_X_y=True)

models = []
models.append( ('LR', LinearRegression()) )
models.append(('RIDGE', Ridge()))
models.append(('LASSO', Lasso()))
models.append(('EN', ElasticNet()))
models.append(('SVR', SVR()))
models.append(('KNN', KNeighborsRegressor()))
models.append(('CART', DecisionTreeRegressor()))

results = []
names = []
for name, model in models:
    kfold = KFold(n_splits = 10, random_state = 7, shuffle = True)
    scoring = 'r2'
    cv_results = cross_val_score(model, Housing_X, Housing_y, cv = kfold, scoring = scoring)
    results.append(cv_results)
    names.append(name)
    msg = (name, cv_results.mean(), cv_results.std())
    print(msg)

pipelines = []
pipelines.append(("ScaledLR",  Pipeline([  ("Scaler", StandardScaler()) , ("LR", LinearRegression())])))
pipelines.append(("ScaledLASSO",  Pipeline([("Scaler", StandardScaler()), ("Lasso", Lasso())])))
pipelines.append(("ScaledEN",     Pipeline([("Scaler", StandardScaler()), ("EN", ElasticNet())])))
pipelines.append(("ScaledRIDGE",  Pipeline([("Scaler", StandardScaler()), ("RIDGE", Ridge())])))
pipelines.append(("ScaledKNN", Pipeline([("Scaler", StandardScaler()), ("KNN", KNeighborsRegressor())])))
pipelines.append(("ScaledD3", Pipeline([("Scaler", StandardScaler()), ("D3", DecisionTreeRegressor())])))
pipelines.append(("ScaledSVR",  Pipeline([("Scaler", StandardScaler()), ("SVR", SVR())])))

results = []
names = []
for name, model in pipelines:
  kfold = KFold(n_splits = 10, random_state = 7, shuffle = True)
  scoring = 'r2'
  cv_results = cross_val_score(model, Housing_X, Housing_y, cv = kfold, scoring = scoring)
  results.append(cv_results)
  names.append(name)
  msg = (name, cv_results.mean(), cv_results.std( ))
  print(msg)

"""**SVR TUNING**"""

from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV

scaler = StandardScaler().fit(Housing_X)
rescaled_Housing_X = scaler.transform(Housing_X)

model = SVR()
grid_space = {
    'kernel': ['rbf'],  # Reduced search space
    'C': [0.1, 1, 10],  # Increased step size
    'gamma': [1, 0.1, 0.01]
}
kfold = KFold(n_splits = 10, random_state = 7, shuffle = True)
grid = GridSearchCV(model, param_grid=grid_space, cv=kfold, scoring='r2')
model_grid = grid.fit(rescaled_Housing_X, Housing_y)

print('Best hyperparameters are: ' + str(model_grid.best_params_))
print('Best score is: ' + str(model_grid.best_score_))

from sklearn.model_selection import train_test_split
test_size = 0.2
seed = 7
X_train, X_test, Y_train, Y_test = train_test_split(Housing_X, Housing_y,
                                                    test_size = test_size,
                                                    random_state = seed)

from sklearn import metrics
from sklearn.linear_model import LinearRegression
model = Pipeline([("Scaler", StandardScaler()), ("SVR", SVR(kernel='rbf' , gamma=1 , C=10))])
model.fit(X_train, Y_train)


y_pred = model.predict(X_test)


print('Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred))
print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, y_pred))
print('Root Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred, squared = False))
print("R2: ", metrics.r2_score(Y_test, y_pred))

"""# **ENSEMBLE MODELS**"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.ensemble import AdaBoostRegressor
from sklearn.ensemble import HistGradientBoostingRegressor
from xgboost import XGBRegressor

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler

ensembles = []
ensembles.append(("ScaledRF",   Pipeline([("Scaler", StandardScaler()), ("RF", RandomForestRegressor())])))
ensembles.append(("ScaleGBM",   Pipeline([("Scaler", StandardScaler()), ("GBM", GradientBoostingRegressor())])))
ensembles.append(("ScaledET",   Pipeline([("Scaler", StandardScaler()), ("ET", ExtraTreesRegressor())])))
ensembles.append(("ScaledAB",   Pipeline([("Scaler", StandardScaler()), ("AB", AdaBoostRegressor())])))
ensembles.append(("ScaledHGBM",   Pipeline([("Scaler", StandardScaler()), ("AB", HistGradientBoostingRegressor())])))
ensembles.append(("ScaledXGB",   Pipeline([("Scaler", StandardScaler()), ("XGB", XGBRegressor())])))

# Evaluate each model
results = []
names = []
for name, model in ensembles:
  kfold = KFold(n_splits = 10, random_state = 7, shuffle = True)
  scoring = 'r2'
  cv_results = cross_val_score(model, Housing_X, Housing_y, cv = kfold, scoring = scoring)
  results.append(cv_results)
  names.append(name)
  msg = (name, cv_results.mean(), cv_results.std( ))
  print(msg)

"""**TUNING XGBREGRESSOR**"""

Housing_X, Housing_y = datasets.fetch_california_housing(return_X_y=True)

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV
from xgboost import XGBRegressor
scaler = StandardScaler().fit(Housing_X)
rescaled_Housing_X = scaler.transform(Housing_X)

model = XGBRegressor()
grid_space = {
 "learning_rate"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,
 "max_depth"        : [ 3, 4, 5, 6, 8, 10, 12, 15],
 "gamma"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],
}

kfold = KFold(n_splits = 10, random_state = 7, shuffle = True)
grid = GridSearchCV(model, param_grid=grid_space, cv=kfold, scoring='r2')
model_grid = grid.fit(rescaled_Housing_X, Housing_y)

print('Best hyperparameters are: ' + str(model_grid.best_params_))
print('Best score is: ' + str(model_grid.best_score_))

from sklearn import metrics
from sklearn.linear_model import LinearRegression
model = Pipeline([("Scaler", StandardScaler()), ("SVR", XGBRegressor(max_depth=8 , learning_rate=0.15 , gamma=0.0))])
model.fit(X_train, Y_train)


y_pred = model.predict(X_test)


print('Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred))
print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, y_pred))
print('Root Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred, squared = False))
print("R2: ", metrics.r2_score(Y_test, y_pred))

"""**HISTGRADIENTBOOSTING TUNING**"""

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV
from xgboost import XGBRegressor
scaler = StandardScaler().fit(Housing_X)
rescaled_Housing_X = scaler.transform(Housing_X)

model = HistGradientBoostingRegressor()
grid_space = {
    'loss': ['squared_error', 'absolute_error'],
    'learning_rate': [0.001 , 0.01, 0.1, 0.5],
    'max_depth': [None , 3, 5, 7 , 10],
    'min_samples_leaf':[20 , 15 , 25]
}

kfold = KFold(n_splits = 10, random_state = 7, shuffle = True)
grid = GridSearchCV(model, param_grid=grid_space, cv=kfold, scoring='r2')
model_grid = grid.fit(rescaled_Housing_X, Housing_y)

print('Best hyperparameters are: ' + str(model_grid.best_params_))
print('Best score is: ' + str(model_grid.best_score_))

from sklearn import metrics
from sklearn.linear_model import LinearRegression
model = Pipeline([("Scaler", StandardScaler()), ("HistGradient", HistGradientBoostingRegressor(learning_rate=0.1 , loss="squared_error" , max_depth=10 , min_samples_leaf=20))])
model.fit(X_train, Y_train)


y_pred = model.predict(X_test)


print('Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred))
print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, y_pred))
print('Root Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred, squared = False))
print("R2: ", metrics.r2_score(Y_test, y_pred))

"""# **CONCLUSION**"""

from sklearn import metrics
from sklearn.ensemble import VotingRegressor

XGB = XGBRegressor(max_depth=8 , learning_rate=0.15 , gamma=0.0)
GB = HistGradientBoostingRegressor(learning_rate=0.1 , loss="squared_error" , max_depth=10 , min_samples_leaf=20)
# Fit the models
clfvt = VotingRegressor(estimators = [('XGB',XGB),('gb', GB)])
clfvt.fit(X_train,Y_train)
y_pred = clfvt.predict(X_test)


print('Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred))
print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, y_pred))
print('Root Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred, squared = False))
print("R2: ", metrics.r2_score(Y_test, y_pred))